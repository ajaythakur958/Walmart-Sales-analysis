/* Analyzing the total sales for each branch and comparing 
the growth rate across months and finding the top performer.*/
with monthly_sales as (
	SELECT 
    branch,
    MONTH(STR_TO_DATE(Date, '%d-%m-%Y')) AS month_num,
    MONTHNAME(STR_TO_DATE(Date, '%d-%m-%Y')) AS month_name,
    ROUND(SUM(Total), 2) AS total_sales
	FROM walmart
	GROUP BY branch , month_num , month_name
	ORDER BY branch, month_num
)

select Branch, Month_Name, Total_sales, Growth_rate, 
round(AVG(growth_rate) over (PARTITION BY branch), 2) as Overall_Growth 
from (
		select branch, month_num, month_name, total_sales,
			LAG(total_sales) OVER (PARTITION BY branch ORDER BY month_num) AS previous_month_sales,
			ROUND(
			(total_sales - LAG(total_sales) OVER (PARTITION BY branch ORDER BY month_num)) 
			/ NULLIF(LAG(total_sales) OVER (PARTITION BY branch ORDER BY month_num), 0) * 100, 
			2 ) AS growth_rate
		from monthly_sales
		) as growth_rating
order by overall_growth desc ;

/*Walmart needs to determine which product line contributes the 
highest profit to each branch.The profit margin should be calculated 
based on the difference between the gross income and cost of goods sold.*/
with product_gross_income as (
	select 
    Branch, `product line` as Product_Line, 
	round(sum(`gross income`)) as gross_income_for_EachProduct,
	round(sum(total)) as total_revenue_for_EachProduct
	from walmart
	group by Branch, Product_Line
)
select *,
	round((gross_income_for_EachProduct/total_revenue_for_EachProduct)*100, 2) 
    as profit_margin_for_EachProduct
from product_gross_income
order by profit_margin_for_EachProduct desc, branch ;


/*Walmart wants to segment customers based on their average spending behavior. 
Classify customers into threetiers: High, Medium, and Low spenders based on their total purchase amounts.*/
select
    Customer_id,
    TotalSpending,
    case
        when TotalSpending > ROUND(AVG(TotalSpending) OVER (), 2) then 'High'
        when TotalSpending > ROUND(AVG(TotalSpending) OVER (), 2)*0.95 then 'Medium'
        else 'Low'
    end as SpendingSegment
from (select
        `Customer ID` as Customer_id,
        round(SUM(Total), 2) as TotalSpending
      from walmart
      group by Customer_id
    ) as customer_spendingc ;



/*Walmart suspects that some transactions have unusually high or low sales 
compared to the average for the product line. Identify these anomalies.*/
USE walmart_db;
WITH product_line_avg AS (
  SELECT 
	`Product line` as Product_Line, 
    round(avg(total),2) AS avg_total
  FROM walmart
  GROUP BY Product_Line
)

select 
	w.`Invoice ID`, w.`Customer ID`, w.`Product line`, w.total as Total_Spends,
	case
		when w.total < 0.5*a.avg_total then 'low_anomaly'
		when w.total > 1.5*a.avg_total then 'high_anomaly'
		else 'normal'
	end as Anomalies
from walmart w
join product_line_avg a 
on w.`Product line` = a.Product_Line ;

/*Walmart needs to determine the most popular payment method 
in each city to tailor marketing strategies.*/
select city, payment, payment_count
from (
	select 
		city, payment, 
		count(*) as payment_count,
		ROW_NUMBER() over (PARTITION BY city ORDER BY count(*) desc) as ranking
	from walmart
	group by city, payment
	order by city, payment_count desc
    ) as payment_count
where ranking = 1 ;


/*Walmart wants to understand the sales distribution 
between male and female customers on a monthly basis.*/
select gender,
	MONTH(STR_TO_DATE(Date, '%d-%m-%Y')) AS month_num,
	monthname(STR_TO_DATE(Date, '%d-%m-%Y')) AS month_name,
	round(sum(total), 0) as total_sales
from walmart
group by gender, month_num, month_name
order by gender, month_num ;


/*Walmart wants to know which product lines are 
preferred by different customer types(Member vs. Normal)*/
with customer_purchases as (
	select 
		`customer type` as Customer_Type ,
		`product line` as Product_Line,
		count(*) as total_purchases
	from walmart
	group by Customer_Type, Product_Line
	order by Customer_Type, total_purchases desc
)

select 
	Customer_Type, Product_Line, total_purchases
from (
    select *,
        rank() over (partition by Customer_Type  order by total_purchases desc ) as rnk
    FROM customer_purchases
    ) as ranked_purchases
where rnk = 1 ;

/*Walmart needs to identify customers who made repeat  purchases 
within a specific time frame (e.g., within 30days)*/
with Grouped_time_frame as (
	select 
		`customer id` as customer_id,
		str_to_date(`Date`, '%d-%m-%Y') as purchase_date,
		floor( datediff(str_to_date(`Date`, '%d-%m-%Y') ,
        (select min(str_to_date(`Date`, '%d-%m-%Y')) from walmart))/30) as Grouped_30days
    from walmart
    )

select 
	Grouped_30days, customer_id,
	count(*) as purchase_counts
from Grouped_time_frame
group by Grouped_30days, customer_id
having purchase_counts > 1
order by Grouped_30days, purchase_counts desc ;



/*Walmart wants to reward its top 5 customers 
who have generated the most sales Revenue*/
select 
	`customer ID` as Customer_id, 
    round(sum(total)) as Totoal_Amount_Spends
from walmart
GROUP BY Customer_id
order by Totoal_Amount_Spends desc
limit 5 ;

/*Walmart wants to analyze the sales patterns to determine 
which day of the week brings the highest sales.*/
select
	dayname(STR_TO_DATE(Date, '%d-%m-%Y')) AS WeekName,
	round(sum(total)) as Total_Sales
from walmart
group by WeekName
order by Total_Sales desc ;